Introduction

 This project provides a {{{http://cargo.codehaus.org/}Cargo}} implementation for {{{http://www.mulesoft.org}Mule}} container.

Setup

 To use cargo-mule-container you will need to:
 * define mulesoft.org release repository
 * add cargo-mule-container as a dependency to cargo

 Defining mulesoft.org release repository:

+--
...
  <repositories>
    <repository>
      <id>muleforge-release</id>
      <name>MuleForge Release Repository</name>
      <url>http://repository.mulesoft.org/releases/</url>
    </repository>
  </repositories>
...
+--

Configuration

* Mule Application Unit deployable

 Cargo main deployable metaphor is encapsulated as org.mule.tools.cargo.deployable.MuleApplicationDeployable. This implementation which encapsulates Mule application is usable with all container types.
 Alternatively embedded container supports simple configuration files encapsulated as org.mule.tools.cargo.deployable.MuleConfigurationDeployable.

* Mule 3x Container

 This plugin provides 3 different implementations of Cargo container: Embedded, Installed and iON.

** Embedded Container

 Allows to start a MuleServer using classpath from provided dependencies.
 This container implementation supports a single deployable and no deployer implementation can be used.

 When using this container you will need to provide:

    * mule dependency definitions

    * your application dependencies (if deploying an application)

 This container is implemented by org.mule.tools.cargo.container.Mule3xEmbeddedLocalContainer class and must be used with associated:

    * local configuration (org.mule.tools.cargo.container.configuration.Mule3xLocalConfiguration)

    * deployable type (either org.mule.tools.cargo.deployable.MuleApplicationDeployable or org.mule.tools.cargo.deployable.MuleConfigurationDeployable)

 Example using a mule application:

+--
...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>${cargoVersion}</version>
        <dependencies>
          <dependency>
            <groupId>org.mule.tools.cargo</groupId>
            <artifactId>container</artifactId>
            <version>${project.version}</version>
          </dependency>
          <dependency>
            <groupId>org.mule.modules</groupId>
            <artifactId>mule-module-cxf</artifactId>
            <version>${muleVersion}</version>
          </dependency>
        </dependencies>
        <configuration>
          <wait>false</wait>
          <container>
            <containerId>mule3x</containerId>
            <implementation>org.mule.tools.cargo.container.Mule3xEmbeddedLocalContainer</implementation>
            <type>embedded</type>
          </container>
          <configuration>
            <implementation>org.mule.tools.cargo.container.configuration.Mule3xLocalConfiguration</implementation>
            <deployables>
              <deployable>
                <implementation>org.mule.tools.cargo.deployable.MuleApplicationDeployable</implementation>
                <groupId>org.mule.examples</groupId>
                <artifactId>mule-example-echo</artifactId>
                <type>zip</type>
              </deployable>
            </deployables>
          </configuration>
        </configuration>
      </plugin>
    </plugins>
  </build>
  ...
+--

** Installed Container

 Allows to start a container using a local Mule installation.
 This container implementation does not support deployable and file deployer implementation can be used.

 When using this container you will need to provide:

    * a valid Mule home location

 This container is implemented by org.mule.tools.cargo.container.Mule3xInstalledLocalContainer class and must be used with associated:

    * local configuration (org.mule.tools.cargo.container.configuration.Mule3xLocalConfiguration)

    * deployable type (org.mule.tools.cargo.deployable.MuleApplicationDeployable)

 Example using a mule application:

+--
...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>${cargoVersion}</version>
        <dependencies>
          <dependency>
            <groupId>org.mule.tools.cargo</groupId>
            <artifactId>container</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <wait>false</wait>
          <container>
            <containerId>mule3x</containerId>
            <implementation>org.mule.tools.cargo.container.Mule3xInstalledLocalContainer</implementation>
            <home>/path/to/your/mule/home</home>
          </container>
          <configuration>
            <implementation>org.mule.tools.cargo.container.configuration.Mule3xLocalConfiguration</implementation>
          </configuration>
          <deployer>
            <implementation>org.mule.tools.cargo.deployer.FileDeployer</implementation>
            <type>installed</type>
            <deployables>
              <deployable>
                <implementation>org.mule.tools.cargo.deployable.MuleApplicationDeployable</implementation>
                <groupId>org.mule.examples</groupId>
                <artifactId>mule-example-echo</artifactId>
                <type>zip</type>
              </deployable>
            </deployables>
          </deployer>
        </configuration>
      </plugin>
    </plugins>
  </build>
...
+--

 Or using the regular mule-standalone distribution as dependency:

+--
...
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack</id>
            <phase>package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.mule.distributions</groupId>
                  <artifactId>mule-standalone</artifactId>
                  <version>${muleVersion}</version>
                  <type>zip</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${mule.distribution}</outputDirectory>
                </artifactItem>
              </artifactItems>
              <overWriteReleases>true</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>${cargoVersion}</version>
        <dependencies>
          <dependency>
            <groupId>org.mule.tools.cargo</groupId>
            <artifactId>container</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <wait>false</wait>
          <container>
            <containerId>mule3x</containerId>
            <implementation>org.mule.tools.cargo.container.Mule3xInstalledLocalContainer</implementation>
            <home>${mule.distribution}/mule-standalone-${muleVersion}</home>
          </container>
          <configuration>
            <implementation>org.mule.tools.cargo.container.configuration.Mule3xLocalConfiguration</implementation>
          </configuration>
          <deployer>
            <implementation>org.mule.tools.cargo.deployer.FileDeployer</implementation>
            <type>installed</type>
            <deployables>
              <deployable>
                <implementation>org.mule.tools.cargo.deployable.MuleApplicationDeployable</implementation>
                <groupId>org.mule.examples</groupId>
                <artifactId>mule-example-echo</artifactId>
                <type>zip</type>
              </deployable>
            </deployables>
          </deployer>
        </configuration>
      </plugin>
    </plugins>
  </build>
...
+--

* iON Container

 Allows to connect to your iON domain.
 This container implementation does not support deployable and only iON deployer implementation can be used.

 When using this container you will need to provide:

    * your iON domain/credential details

 This container is implemented by org.mule.tools.cargo.container.IONContainer class and must be used with associated:

    * remote configuration (org.mule.tools.cargo.container.configuration.IONConfiguration)

    * deployable type (org.mule.tools.cargo.deployable.MuleApplicationDeployable)

 Example using a mule application:

+--
...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>${cargoVersion}</version>
        <dependencies>
          <dependency>
            <groupId>org.mule.tools.cargo</groupId>
            <artifactId>container</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <wait>false</wait>
          <container>
            <containerId>ion</containerId>
            <implementation>org.mule.tools.cargo.container.IONContainer</implementation>
            <type>remote</type>
          </container>
          <configuration>
            <implementation>org.mule.tools.cargo.container.configuration.IONConfiguration</implementation>
            <type>runtime</type>
            <properties>
                <domain>YOUR_DOMAIN</domain>
                <username>YOUR_USERNAME</username>
                <password>YOUR_PASSWORD</password>
                <workers>1</workers>
            </properties>
          </configuration>
          <deployer>
            <implementation>org.mule.tools.cargo.deployer.IONDeployer</implementation>
            <type>remote</type>
            <deployables>
              <deployable>
                <implementation>org.mule.tools.cargo.deployable.MuleApplicationDeployable</implementation>
                <groupId>org.mule.examples</groupId>
                <artifactId>mule-example-echo</artifactId>
                <type>zip</type>
              </deployable>
            </deployables>
          </deployer>
        </configuration>
      </plugin>
    </plugins>
  </build>
...
+--

* Lifecycle binding

 Cargo can be configured to be automatically started/stopped during the integration-test maven lifecycle through the binding concept.
 Using following configuration associated maven container will be started before the integration phase and stopped after.

+--
...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        ...
        <executions>
          <execution>
            <id>start-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-container</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
...
+--